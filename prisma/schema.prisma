// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

generator erd {
  provider                      = "prisma-erd-generator"
  output                        = "../sandbox/DATABASE_ERD.svg"
  theme                         = "neutral"
  includeRelationshipFromFields = true
  ERD_DEBUG                     = true
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ============================= ENUMS ==============================

enum Role {
  ADMIN
  REGISTRY
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

enum Term {
  FIRST
  SECOND
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum ReservationStatus {
  PENDING
  APPROVED
  DECLINED
  CANCELLED
}

enum StudentType {
  REGULAR
  IRREGULAR
}

// ============================= MODELS =============================

model User {
  id                 String              @unique @default(uuid())
  dateCreated        DateTime            @default(now())
  lastUpdated        DateTime            @updatedAt
  enabled            Boolean             @default(true)
  email              String              @unique
  givenName          String?
  familyName         String?
  displayName        String?
  picture            String?
  StudentInformation StudentInformation?
  UserLevel          UserLevel?          @relation(fields: [userLevelId], references: [id])
  userLevelId        String?             @unique
  File               File[]
  Log                Log[]

  @@unique([id, email])
  @@fulltext([givenName, familyName, email])
}

model StudentInformation {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  studentType    StudentType
  gender         Gender
  address        String
  contactNumber  String?
  studentId      String?
  User           User          @relation(fields: [userId], references: [id])
  userId         String
  Program        Program       @relation(fields: [programId], references: [id])
  programId      String
  Reservations   Reservation[]
  ClassSection   ClassSection  @relation(fields: [classSectionId], references: [id])
  classSectionId String

  @@unique([userId])
  @@index([programId])
  @@index([classSectionId])
}

model UserLevel {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt
  email       String
  role        Role     @default(STUDENT)
  User        User?

  @@unique([email])
}

model Program {
  id                 String               @unique @default(uuid())
  dateCreated        DateTime             @default(now())
  lastUpdated        DateTime             @updatedAt
  enabled            Boolean              @default(true)
  name               String
  alias              String
  color              String
  yearCount          Int
  ClassSection       ClassSection[]
  StudentInformation StudentInformation[]
  Course             Course[]

  @@unique([name, alias])
  @@fulltext([name, alias])
}

// NOTE: No prerequisite, should be check manually by the registry if they can approve the request 
// for the subject.
model Course {
  id             String           @unique @default(uuid())
  dateCreated    DateTime         @default(now())
  lastUpdated    DateTime         @updatedAt
  enabled        Boolean          @default(true)
  name           String
  alias          String
  lecUnit        Int
  Program        Program          @relation(fields: [programId], references: [id])
  programId      String
  term           Term
  CourseSchedule CourseSchedule[]

  @@unique([name])
  @@unique([alias])
  @@index([programId])
  @@fulltext([name, alias])
}

model ClassSection {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  yearLevel               Int
  name                    String               @unique
  Program                 Program              @relation(fields: [programId], references: [id])
  programId               String
  maximumCapacity         Int                  @default(50)
  maximumIrregularStudent Int                  @default(10)
  totalStudentCount       Int                  @default(0)
  StudentInformation      StudentInformation[]
  CourseSchedule          CourseSchedule[]

  @@index([programId])
  @@fulltext([name])
}

model CourseSchedule {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  day  Day?
  from DateTime? @db.Time()
  to   DateTime? @db.Time()

  ClassSection   ClassSection                  @relation(fields: [classSectionId], references: [id])
  Course         Course                        @relation(fields: [courseId], references: [id])
  Reservations   CourseScheduleOnReservation[]
  classSectionId String
  courseId       String

  @@index([classSectionId])
  @@index([courseId])
}

model Reservation {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  status ReservationStatus @default(PENDING)
  File   File?             @relation(fields: [fileId], references: [id])
  fileId String?

  CourseSchedule       CourseScheduleOnReservation[]
  StudentInformation   StudentInformation?           @relation(fields: [studentInformationId], references: [id])
  studentInformationId String?

  @@index([fileId])
  @@index([studentInformationId])
}

model CourseScheduleOnReservation {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())
  lastUpdated DateTime @updatedAt

  CourseSchedule   CourseSchedule? @relation(fields: [courseScheduleId], references: [id])
  courseScheduleId String?
  Reservation      Reservation?    @relation(fields: [reservationId], references: [id])
  reservationId    String?

  @@index([courseScheduleId])
  @@index([reservationId])
}

model File {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())

  fileId      String        @unique
  mimeType    String
  size        Int
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
  Reservation Reservation[]

  @@index([userId])
}

model Log {
  id          String   @unique @default(uuid())
  dateCreated DateTime @default(now())

  User    User?   @relation(fields: [userId], references: [id])
  message String
  userId  String?

  @@index([userId])
}
